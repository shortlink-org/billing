// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	ports "github.com/shortlink-org/billing/payments/internal/application/payments/ports"
	mock "github.com/stretchr/testify/mock"
)

// MockPaymentProvider is an autogenerated mock type for the PaymentProvider type
type MockPaymentProvider struct {
	mock.Mock
}

type MockPaymentProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPaymentProvider) EXPECT() *MockPaymentProvider_Expecter {
	return &MockPaymentProvider_Expecter{mock: &_m.Mock}
}

// CreatePayment provides a mock function with given fields: ctx, in
func (_m *MockPaymentProvider) CreatePayment(ctx context.Context, in ports.CreatePaymentIn) (ports.CreatePaymentOut, error) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for CreatePayment")
	}

	var r0 ports.CreatePaymentOut
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ports.CreatePaymentIn) (ports.CreatePaymentOut, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ports.CreatePaymentIn) ports.CreatePaymentOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(ports.CreatePaymentOut)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ports.CreatePaymentIn) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaymentProvider_CreatePayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePayment'
type MockPaymentProvider_CreatePayment_Call struct {
	*mock.Call
}

// CreatePayment is a helper method to define mock.On call
//   - ctx context.Context
//   - in ports.CreatePaymentIn
func (_e *MockPaymentProvider_Expecter) CreatePayment(ctx interface{}, in interface{}) *MockPaymentProvider_CreatePayment_Call {
	return &MockPaymentProvider_CreatePayment_Call{Call: _e.mock.On("CreatePayment", ctx, in)}
}

func (_c *MockPaymentProvider_CreatePayment_Call) Run(run func(ctx context.Context, in ports.CreatePaymentIn)) *MockPaymentProvider_CreatePayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ports.CreatePaymentIn))
	})
	return _c
}

func (_c *MockPaymentProvider_CreatePayment_Call) Return(_a0 ports.CreatePaymentOut, _a1 error) *MockPaymentProvider_CreatePayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymentProvider_CreatePayment_Call) RunAndReturn(run func(context.Context, ports.CreatePaymentIn) (ports.CreatePaymentOut, error)) *MockPaymentProvider_CreatePayment_Call {
	_c.Call.Return(run)
	return _c
}

// RefundPayment provides a mock function with given fields: ctx, in
func (_m *MockPaymentProvider) RefundPayment(ctx context.Context, in ports.RefundPaymentIn) (ports.RefundPaymentOut, error) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for RefundPayment")
	}

	var r0 ports.RefundPaymentOut
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ports.RefundPaymentIn) (ports.RefundPaymentOut, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ports.RefundPaymentIn) ports.RefundPaymentOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(ports.RefundPaymentOut)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ports.RefundPaymentIn) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaymentProvider_RefundPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefundPayment'
type MockPaymentProvider_RefundPayment_Call struct {
	*mock.Call
}

// RefundPayment is a helper method to define mock.On call
//   - ctx context.Context
//   - in ports.RefundPaymentIn
func (_e *MockPaymentProvider_Expecter) RefundPayment(ctx interface{}, in interface{}) *MockPaymentProvider_RefundPayment_Call {
	return &MockPaymentProvider_RefundPayment_Call{Call: _e.mock.On("RefundPayment", ctx, in)}
}

func (_c *MockPaymentProvider_RefundPayment_Call) Run(run func(ctx context.Context, in ports.RefundPaymentIn)) *MockPaymentProvider_RefundPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ports.RefundPaymentIn))
	})
	return _c
}

func (_c *MockPaymentProvider_RefundPayment_Call) Return(_a0 ports.RefundPaymentOut, _a1 error) *MockPaymentProvider_RefundPayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymentProvider_RefundPayment_Call) RunAndReturn(run func(context.Context, ports.RefundPaymentIn) (ports.RefundPaymentOut, error)) *MockPaymentProvider_RefundPayment_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPaymentProvider creates a new instance of MockPaymentProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPaymentProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPaymentProvider {
	mock := &MockPaymentProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
