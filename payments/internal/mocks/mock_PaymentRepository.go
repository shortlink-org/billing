// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	payment "github.com/shortlink-org/billing/payments/internal/domain/payment"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockPaymentRepository is an autogenerated mock type for the PaymentRepository type
type MockPaymentRepository struct {
	mock.Mock
}

type MockPaymentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPaymentRepository) EXPECT() *MockPaymentRepository_Expecter {
	return &MockPaymentRepository_Expecter{mock: &_m.Mock}
}

// Load provides a mock function with given fields: ctx, id
func (_m *MockPaymentRepository) Load(ctx context.Context, id uuid.UUID) (*payment.Payment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 *payment.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*payment.Payment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *payment.Payment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payment.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaymentRepository_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type MockPaymentRepository_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockPaymentRepository_Expecter) Load(ctx interface{}, id interface{}) *MockPaymentRepository_Load_Call {
	return &MockPaymentRepository_Load_Call{Call: _e.mock.On("Load", ctx, id)}
}

func (_c *MockPaymentRepository_Load_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockPaymentRepository_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockPaymentRepository_Load_Call) Return(_a0 *payment.Payment, _a1 error) *MockPaymentRepository_Load_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymentRepository_Load_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*payment.Payment, error)) *MockPaymentRepository_Load_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, p, expectedVersion
func (_m *MockPaymentRepository) Save(ctx context.Context, p *payment.Payment, expectedVersion uint64) error {
	ret := _m.Called(ctx, p, expectedVersion)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *payment.Payment, uint64) error); ok {
		r0 = rf(ctx, p, expectedVersion)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPaymentRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockPaymentRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - p *payment.Payment
//   - expectedVersion uint64
func (_e *MockPaymentRepository_Expecter) Save(ctx interface{}, p interface{}, expectedVersion interface{}) *MockPaymentRepository_Save_Call {
	return &MockPaymentRepository_Save_Call{Call: _e.mock.On("Save", ctx, p, expectedVersion)}
}

func (_c *MockPaymentRepository_Save_Call) Run(run func(ctx context.Context, p *payment.Payment, expectedVersion uint64)) *MockPaymentRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*payment.Payment), args[2].(uint64))
	})
	return _c
}

func (_c *MockPaymentRepository_Save_Call) Return(_a0 error) *MockPaymentRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPaymentRepository_Save_Call) RunAndReturn(run func(context.Context, *payment.Payment, uint64) error) *MockPaymentRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPaymentRepository creates a new instance of MockPaymentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPaymentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPaymentRepository {
	mock := &MockPaymentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
