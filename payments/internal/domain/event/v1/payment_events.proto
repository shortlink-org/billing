// payments/internal/domain/event/v1/payment_events.proto
syntax = "proto3";

package domain.event.v1;

option go_package = "github.com/shortlink-org/billing/payments/internal/domain/event/v1;eventv1";

import "google/type/money.proto";
import "google/protobuf/field_mask.proto";

// -----------------------------------------------------------------------------
// Enums
// -----------------------------------------------------------------------------

// Payment kind for business semantics.
enum PaymentKind {
  PAYMENT_KIND_UNSPECIFIED = 0;
  PAYMENT_KIND_ONE_TIME    = 1; // one-time payment
  PAYMENT_KIND_RECURRING   = 2; // subscription/recurring
}

// Mode of capture.
enum CaptureMode {
  CAPTURE_MODE_UNSPECIFIED = 0;
  CAPTURE_MODE_IMMEDIATE   = 1; // auth + capture immediately
  CAPTURE_MODE_MANUAL      = 2; // auth separately, capture later
}

// Reason for cancellation.
enum CancelReason {
  CANCEL_REASON_UNSPECIFIED = 0;
  CANCEL_REASON_USER        = 1; // canceled by user
  CANCEL_REASON_SYSTEM      = 2; // canceled by system
  CANCEL_REASON_AUTH_VOID   = 3; // void of authorization
  CANCEL_REASON_DUPLICATE   = 4; // duplicate payment
}

// Reason for payment failure (provider-agnostic buckets).
enum FailureReason {
  FAILURE_REASON_UNSPECIFIED   = 0;
  FAILURE_REASON_DECLINED      = 1; // declined by issuer/PSP
  FAILURE_REASON_REVERSED      = 2; // reversed/disputed
  FAILURE_REASON_AUTH_EXPIRED  = 3; // authorization expired
  FAILURE_REASON_NETWORK_ERROR = 4; // network/integration error
}

// -----------------------------------------------------------------------------
// Metadata
// -----------------------------------------------------------------------------

// Minimal event metadata for idempotency and ordering.
message EventMeta {
  bytes  event_id   = 1; // 16-byte UUID — unique event ID (usually UUIDv7)
  bytes  payment_id = 2; // 16-byte UUID — aggregate/payment ID
  uint64 version    = 3; // aggregate version AFTER applying this event
  bytes  invoice_id = 4; // 16-byte UUID — related invoice/billing ID

  // FieldMask allows specifying which fields are intentionally set.
  google.protobuf.FieldMask field_mask = 100;
}

// -----------------------------------------------------------------------------
// Events (Payment lifecycle)
// -----------------------------------------------------------------------------

// Initializes the payment aggregate with billing linkage and amount.
// Final state after applying: CREATED.
message PaymentCreated {
  EventMeta           meta         = 1;
  bytes               invoice_id   = 2; // 16-byte UUID — reference to billing
  google.type.Money   amount       = 3; // amount to charge
  PaymentKind         kind         = 4; // business semantics
  CaptureMode         capture_mode = 5; // capture strategy

  google.protobuf.FieldMask field_mask = 100;
}

// Optional step when SCA/3DS is required by provider/rules.
// Final state: WAITING_FOR_CONFIRMATION.
message PaymentWaitingForConfirmation {
  EventMeta meta = 1;

  google.protobuf.FieldMask field_mask = 100;
}

// Authorization hold placed on customer's payment method.
// Final state: AUTHORIZED (or remains AUTHORIZED if incremental).
message PaymentAuthorized {
  EventMeta         meta              = 1;
  google.type.Money authorized_amount = 2; // incremental authorized amount

  google.protobuf.FieldMask field_mask = 100;
}

// Funds captured; payment completed.
// Final state: PAID (incremental capture allowed).
message PaymentPaid {
  EventMeta         meta            = 1;
  google.type.Money captured_amount = 2; // incremental captured amount

  google.protobuf.FieldMask field_mask = 100;
}

// Refund succeeded (partial or full).
// If `full` is true, final state becomes REFUNDED; else remains PAID.
message PaymentRefunded {
  EventMeta         meta           = 1;
  google.type.Money refund_amount  = 2; // amount for this refund op
  google.type.Money total_refunded = 3; // cumulative total refunded after this op
  bool              full           = 4; // total_refunded == captured total

  google.protobuf.FieldMask field_mask = 100;
}

// Refund attempt failed (no state change, remains PAID).
message PaymentRefundFailed {
  EventMeta     meta   = 1;
  FailureReason reason = 2;

  google.protobuf.FieldMask field_mask = 100;
}

// Payment canceled by user/system (includes void of authorization).
// Final state: CANCELED.
message PaymentCanceled {
  EventMeta    meta   = 1;
  CancelReason reason = 2;

  google.protobuf.FieldMask field_mask = 100;
}

// Payment failed (declined, reversed, or authorization expired).
// Final state: FAILED.
message PaymentFailed {
  EventMeta     meta    = 1;
  FailureReason reason  = 2;
  string        message = 3; // optional provider/service text

  google.protobuf.FieldMask field_mask = 100;
}
