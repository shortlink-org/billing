// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"github.com/shortlink-org/billing/payments/internal/application/payments/usecase/create"
	"github.com/shortlink-org/billing/payments/internal/application/payments/usecase/refund"
)

// Injectors from wire.go:

// InitializeCreateHandler wires up the create payment usecase handler
func InitializeCreateHandler(cfg PaymentConfig) (*create.Handler, error) {
	paymentRepository := ProvidePaymentRepository()
	paymentProvider := ProvidePaymentProvider(cfg)
	handler := ProvideCreateHandler(paymentRepository, paymentProvider)
	return handler, nil
}

// InitializeRefundHandler wires up the refund payment usecase handler
func InitializeRefundHandler(cfg PaymentConfig) (*refund.Handler, error) {
	paymentRepository := ProvidePaymentRepository()
	paymentProvider := ProvidePaymentProvider(cfg)
	handler := ProvideRefundHandler(paymentRepository, paymentProvider)
	return handler, nil
}

// InitializePaymentUsecases wires up all payment usecase handlers
func InitializePaymentUsecases(cfg PaymentConfig) (*PaymentUsecases, error) {
	paymentRepository := ProvidePaymentRepository()
	paymentProvider := ProvidePaymentProvider(cfg)
	handler := ProvideCreateHandler(paymentRepository, paymentProvider)
	refundHandler := ProvideRefundHandler(paymentRepository, paymentProvider)
	paymentUsecases := &PaymentUsecases{
		CreatePayment: handler,
		RefundPayment: refundHandler,
	}
	return paymentUsecases, nil
}

// wire.go:

// Wire provider sets for dependency injection
var (
	// InfrastructureSet provides all infrastructure dependencies
	InfrastructureSet = wire.NewSet(
		ProvidePaymentRepository,
		ProvidePaymentProvider,
	)

	// UsecaseSet provides all usecase handlers
	UsecaseSet = wire.NewSet(
		ProvideCreateHandler,
		ProvideRefundHandler,
	)

	// AllProviders combines all provider sets
	AllProviders = wire.NewSet(
		InfrastructureSet,
		UsecaseSet,
	)
)
