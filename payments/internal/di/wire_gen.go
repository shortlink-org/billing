// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"
	"github.com/google/wire"
	"github.com/shortlink-org/billing/payments/internal/application/payments/usecase/create"
	"github.com/shortlink-org/billing/payments/internal/application/payments/usecase/refund"
	"github.com/shortlink-org/shortlink/pkg/di"
	"github.com/shortlink-org/shortlink/pkg/di/pkg/autoMaxPro"
	"github.com/shortlink-org/go-sdk/config"
	"github.com/shortlink-org/shortlink/pkg/di/pkg/context"
	"github.com/shortlink-org/shortlink/pkg/di/pkg/logger"
	"github.com/shortlink-org/shortlink/pkg/di/pkg/profiling"
	"github.com/shortlink-org/shortlink/pkg/di/pkg/traicing"
	"github.com/shortlink-org/go-sdk/logger"
	"github.com/shortlink-org/shortlink/pkg/observability/metrics"
	"go.opentelemetry.io/otel/trace"
)

// Injectors from wire.go:

func InitializePaymentService() (*PaymentService, func(), error) {
	context, cleanup, err := ctx.New()
	if err != nil {
		return nil, nil, err
	}
	logger, cleanup2, err := logger_di.New(context)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	configConfig, err := config.New(logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	autoMaxProAutoMaxPro, cleanup3, err := autoMaxPro.New(logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	tracerProvider, cleanup4, err := traicing_di.New(context, logger)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	monitoring, cleanup5, err := metrics.New(context, logger, tracerProvider)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	pprofEndpoint, err := profiling.New(context, logger)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	paymentRepository := ProvidePaymentRepository()
	paymentProvider, err := ProvidePaymentProvider()
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	handler := ProvideCreateHandler(paymentRepository, paymentProvider)
	refundHandler := ProvideRefundHandler(paymentRepository, paymentProvider)
	paymentService, err := NewPaymentService(context, logger, configConfig, autoMaxProAutoMaxPro, tracerProvider, monitoring, pprofEndpoint, handler, refundHandler)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return paymentService, func() {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

type PaymentService struct {
	Log        logger.Logger
	Config     *config.Config
	AutoMaxPro autoMaxPro.AutoMaxPro
	Context    context.Context

	Tracer        trace.TracerProvider
	Metrics       *metrics.Monitoring
	PprofEndpoint profiling.PprofEndpoint

	CreatePayment *create.Handler
	RefundPayment *refund.Handler
}

var InfrastructureSet = wire.NewSet(
	ProvidePaymentRepository,
	ProvidePaymentProvider,
)

var UsecaseSet = wire.NewSet(
	ProvideCreateHandler,
	ProvideRefundHandler,
)

var PaymentSet = wire.NewSet(di.DefaultSet, InfrastructureSet,
	UsecaseSet,
	NewPaymentService,
)

func NewPaymentService(ctx2 context.Context,

	log logger.Logger,
	cfg *config.Config,
	auto autoMaxPro.AutoMaxPro,
	tr trace.TracerProvider,
	mon *metrics.Monitoring,
	pprof profiling.PprofEndpoint,
	createUC *create.Handler,
	refundUC *refund.Handler,
) (*PaymentService, error) {
	return &PaymentService{
		Context:       ctx2,
		Log:           log,
		Config:        cfg,
		AutoMaxPro:    auto,
		Tracer:        tr,
		Metrics:       mon,
		PprofEndpoint: pprof,
		CreatePayment: createUC,
		RefundPayment: refundUC,
	}, nil
}
