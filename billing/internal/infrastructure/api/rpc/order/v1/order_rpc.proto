syntax = "proto3";

package infrastructure.api.rpc.order.v1;

option go_package = "github.com/shortlink-org/shortlink/internal/billing/internal/infrastructure/order_rpc";

import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "domain/order/v1/order.proto";

// Order service
message Order {
  // FieldMask
  google.protobuf.FieldMask field_mask = 5;

  // order id
  string id = 1;
  // user id
  string user_id = 2;
  // tariff id
  string tariff_id = 3;
  // status order
  domain.order.v1.StatusOrder status = 4;
}

// Order list
message Orders {
  // order list
  repeated Order list = 1;
}

// OrderService is the order service definition.
service OrderService {
  // OrderHistory returns the order history.
  rpc OrderHistory(google.protobuf.Empty) returns(OrderHistoryResponse) {}
  // OrderCreate creates a new order.
  rpc OrderCreate(OrderCreateRequest) returns(OrderCreateResponse) {}
  // OrderUpdate updates an existing order.
  rpc OrderUpdate(OrderUpdateRequest) returns(OrderUpdateResponse) {}
  // OrderClose closes an existing order.
  rpc OrderClose(OrderCloseRequest) returns(OrderCloseResponse) {}
  // OrderApprove approves an existing order.
  rpc OrderApprove(OrderApproveRequest) returns(OrderApproveResponse) {}
}

// OrderHistoryResponse is the response for the OrderHistory RPC.
message OrderHistoryResponse {
  // List of orders.
  repeated Order list = 1;
}

// OrderCreateRequest is the request for the OrderCreate RPC.
message OrderCreateRequest {
  // Order to create.
  Order order = 1;
}

// OrderCreateResponse is the response for the OrderCreate RPC.
message OrderCreateResponse {
  // Created order.
  Order order = 1;
}

// OrderUpdateRequest is the request for the OrderUpdate RPC.
message OrderUpdateRequest {
  // Order to update.
  Order order = 1;
}

// OrderUpdateResponse is the response for the OrderUpdate RPC.
message OrderUpdateResponse {
  // Updated order.
  Order order = 1;
}

// OrderCloseRequest is the request for the OrderClose RPC.
message OrderCloseRequest {
  // Order to close.
  Order order = 1;
}

// OrderCloseResponse is the response for the OrderClose RPC.
message OrderCloseResponse {
  // Closed order.
  Order order = 1;
}

// OrderApproveRequest is the request for the OrderApprove RPC.
message OrderApproveRequest {
  // Order to approve.
  Order order = 1;
}

// OrderApproveResponse is the response for the OrderApprove RPC.
message OrderApproveResponse {
  // Approved order.
  Order order = 1;
}

